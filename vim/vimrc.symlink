" Set leader key to ,
let mapleader = "\<Space>"

" vim instead of vi settings
set nocompatible

" spaces instead of tabs
set expandtab
set smarttab
set shiftwidth=4
set tabstop=4

" Use C-style indentation
set autoindent

" Do not show startup message
set shortmess=atIO

" Dont write backup and swap files
set nobackup
set nowritebackup
set noswapfile

" Use the mouse to move the cursor
set mouse=a

" keep the selection when moving blocks in v-mode
" vnoremap < <gv
" vnoremap > >gv

" Search settings
set hlsearch
set incsearch
set ignorecase
set smartcase

" show current command, matching bracket and mode, line numbers
set showcmd
set noshowmatch
set number

" Long undo and command history
set undolevels=1000
set history=200

" Save undo history permanently
if has('persistent_undo')
    set undodir=~/.vimundo
    set undofile
endif

" hide buffers instead of closing
set hidden

" show a few lines below the current line
set scrolloff=7

" the same horizontally
set sidescrolloff=5

" allow backspace to work over everything
set backspace=indent,eol,start

" Use backspace in normal mode
nnoremap <bs> X

" do not wrap lines automatically
set nowrap

" Use softwrapping in text documents
autocmd FileType text,markdown,tex,html setlocal wrap linebreak
if exists('+breakindent')
    set breakindent
    set showbreak=┊ 
endif

" Use Ctrl-q for quitting, Ctrl-s for saving
noremap <C-Q> :q<CR>
vnoremap <C-Q> <Esc>:q<CR>
inoremap <C-Q> <Esc>:q<CR>

noremap <silent> <C-S>          :write<CR>
vnoremap <silent> <C-S>         <Esc>:write<CR>
inoremap <silent> <C-S>         <Esc>:write<CR>

" Use Ctrl-b to close a buffer
noremap <C-B>   :bd<CR>
vnoremap <C-B>  <Esc>:bd<CR>
inoremap <C-B>  <Esc>:bd<CR>

" remap :W, :Q etc if you press the shift key for too long
cabbrev Q quit
cabbrev W write
cabbrev WQ wq
cabbrev Wq wq

" call :Vimrc to edit ~/.vimrc
command Vimrc edit ~/.vimrc

" Vundle
filetype off  " required to load Vundle

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Bundles
Plugin 'gmarik/Vundle.vim'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-unimpaired'
Plugin 'tpope/vim-repeat'
Plugin 'scrooloose/syntastic'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'airblade/vim-gitgutter'
Plugin 'bronson/vim-trailing-whitespace'
Plugin 'travitch/hasksyn'
Plugin 'groenewege/vim-less'
Plugin 'plasticboy/vim-markdown'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'bronson/vim-visual-star-search'
Plugin 'tommcdo/vim-exchange'
Plugin 'godlygeek/tabular'
Plugin 'wellle/targets.vim'
Plugin 'AndrewRadev/sideways.vim'
Plugin 'terryma/vim-expand-region'
Plugin 'nishigori/increment-activator'
Plugin 'tomasr/molokai'
Plugin 'vim-scripts/gnuplot.vim'
Plugin 'PotatoesMaster/i3-vim-syntax'
Plugin 'kien/ctrlp.vim'
Plugin 'pangloss/vim-javascript'
Plugin 'othree/html5.vim'
Plugin 'raichoo/purescript-vim'
Plugin 'frigoeu/psc-ide-vim'
Plugin 'jvirtanen/vim-octave'
Plugin 'derekwyatt/vim-fswitch'

" UltiSnips
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'

call vundle#end()

" default encoding in UTF-8
filetype plugin indent on
set encoding=utf-8

" Syntax highlighting
set t_Co=256
syntax enable
colorscheme molokai
hi ColorColumn      ctermbg=232
hi Visual           ctermbg=237

" Visible whitespace with :set list
set listchars=tab:▸\ ,eol:¬

" disable arrow keys :-)
noremap   <Up>     <NOP>
noremap   <Down>   <NOP>
noremap   <Left>   <NOP>
noremap   <Right>  <NOP>

" Clear search highlight (and redraw screen) with C-l
nnoremap <silent> <C-l> :nohlsearch<CR><C-l>

" Autocompletion in command mode
set wildmenu
set wildmode=list:longest,full
set wildignore+=*/dist/*,*.pdf,*/output/*,*/bower_components/*

" Use par to format text
" http://vimcasts.org/episodes/formatting-text-with-par/
set formatprg=par\ -w79

" Highlight the 80th column
if exists("+colorcolumn")
    set colorcolumn=80
endif

" Decrease dead time after ESC key
set ttimeout
set ttimeoutlen=50

" Call make
nmap <silent> <Leader>m :make<CR>

" Swap the current word with the next word (which can be on a newline and
" punctuation is skipped):
nmap <silent> gw "_yiw:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><C-o>:noh<CR>

" Move to beginning/end of line while in insert mode
inoremap <C-a> <C-o>0
inoremap <C-e> <C-o>$

" Go in and out of paste mode with F10
set pastetoggle=<F10>

" Remember last position when reopening files
set viminfo='10,\"100,:20,%,n~/.viminfo
if has("autocmd")
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Do not insert comment leaders automatically
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Bubble-move (inspired by http://vimcasts.org/episodes/bubbling-text/)
nmap <C-k> [e`]        " single lines
nmap <C-j> ]e`]
vmap <C-k> [e`[V`]     " visual mode
vmap <C-j> ]e`[V`]

" Switch off octal/hex number detection for <C-a>, <C-x>
set nrformats=

" Use '\' as ',' for going backwards through character finds (opposite of ';')
noremap \ ,

" LaTeX helpers
" Add a & to the first = in this line and append '\\' at the end
nmap <Leader>& ml^f=i&<ESC>A \\<ESC>`l
" Only append \\
nmap <Leader>e mlA\\<ESC>`l
" Change a ( .. ) part to \br{ .. }
nmap <Leader>b cs({i\bb<ESC>

" In addition to C-w: delete word around/after the cursor
imap <C-d> <C-o>daw
nmap <C-d> daw

" Use pointfree with 'gq' in haskell files
autocmd BufEnter *.hs set formatprg=xargs\ -0\ pointfree

" Duplicate a line / selection and comment out the first
nmap <Leader>c Ypkgccj
vmap <Leader>c gcgvyPgvgc

" Typing gcc is too much
nmap <C-e> gcc
imap <C-e> <C-o>gcc
vmap <C-e> gc

" Copy and paste to system clipboard with <Leader>p and <Leader>y
vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P

" Gnuplot
autocmd BufNewFile,BufRead *.gp set filetype=gnuplot
autocmd FileType gnuplot set commentstring=#\ %s

" Syntastic
let g:syntastic_enable_highlighting=0
let g:syntastic_check_on_open=0
let g:syntastic_check_on_wq=0
let g:syntastic_enable_balloons=0
let g:syntastic_python_checkers=['flake8']
let g:syntastic_python_flake8_args='--max-line-length=99 --ignore="E265,E203,E131"'
let g:syntastic_tex_checkers = []
let g:syntastic_sh_checkers=['shellcheck']
let g:syntastic_javascript_jslint_args = " "  " show all warnings

" airline
set laststatus=2
let g:airline_powerline_fonts=1
let g:airline_theme='molokai'
set noshowmode  " airline already shows it

" Synctex forward searching
" See http://tex.stackexchange.com/a/10374/42128
" Configure okular to call "vim --servername VIM --remote +'%l' '%f'"
" for backward searching (vim needs to run in server mode).
function! SynctexShow()
    let synctex = glob("*.synctex.gz", 1)
    if strlen(synctex) == 0
        let synctex = glob("dist/*.synctex.gz", 1)
        if strlen(synctex) == 0
            echo "No synctex file found."
            return 0
        end
    end

    let pdffile = substitute(synctex, "synctex.gz", "pdf", "")
    let execline = printf(":silent !okular --noraise --unique '%s\\#src:%d %s' > /dev/null 2> /dev/null &", shellescape(pdffile), line("."), shellescape(expand("%:p")))
    exec execline
    :redraw!
endfunction

" Vim Markdown
let g:vim_markdown_folding_disabled=1

" Faster TeX syntax highlighting (disables some highlighting features)
let g:tex_fast="M"

" Use english messages
language en_US.UTF-8

" Align with respect to = or : with <Leader>= and <Leader>:
nmap <Leader>= :Tabularize /=<CR>
vmap <Leader>= :Tabularize /=<CR>
nmap <Leader>: :Tabularize /:\zs<CR>
vmap <Leader>: :Tabularize /:\zs<CR>

" Ultisnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" Add quick mappings for sideways.vim that allow shifting of arguments
nmap <Leader>h :SidewaysLeft<CR>
nmap <Leader>l :SidewaysRight<CR>

" Use sideways.vim with Haskell
autocmd FileType haskell let b:sideways_definitions = [
      \   {
      \     'start':       '::\s*',
      \     'end':         '^$',
      \     'delimiter':   '^\s*->\s*',
      \     'skip':        '^\s',
      \     'brackets':    ['(', ')'],
      \   },
      \ ]

" GitGutter keymappings
nmap <Leader>j <Plug>GitGutterNextHunk
nmap <Leader>k <Plug>GitGutterPrevHunk
nmap <Leader>r <Plug>GitGutterUndoHunk
nmap <Leader>a <Plug>GitGutterStageHunk
nmap <Leader>v <Plug>GitGutterPreviewHunk

let g:tex_flavor='latex'

" Help in detecting the filetype of config files
au BufRead,BufNewFile bashrc.symlink set filetype=sh
au BufRead,BufNewFile alias.symlink set filetype=sh
au BufRead,BufNewFile shellrc.symlink set filetype=sh

" Jedi
let g:jedi#popup_on_dot = 0
let g:jedi#rename_command = "<leader>f"  " reFactor

" CartoCSS
autocmd BufNewFile,BufRead *.mss set filetype=less

" jshint
autocmd BufNewFile,BufRead .jshintrc set filetype=json

" LaTeX class files
autocmd BufNewFile,BufRead *.cls set filetype=tex

" Octave
autocmd FileType octave set commentstring=%\ %s

" SSH config
autocmd BufNewFile,BufRead .ssh/config set filetype=sshconfig

" C++
let g:syntastic_cpp_checkers = ['cppcheck']
let g:syntastic_cpp_compiler_options = ' -std=c++11 -stdlib=libc++'
nmap <C-g> :CtrlPTag<CR>

" Special indentation for some files
au FileType purescript setl sw=2 st=2
au FileType html setl sw=2 st=2
au FileType markdown setl sw=2 st=2
au FileType haskell setl sw=2 st=2

" Insert current date
map <Leader>i "=strftime("%b %d, %Y")<CR>p

" Switch between corresponding files
map <Leader>z :FSHere<CR>

autocmd! BufEnter *.purs let b:fswitchdst = 'js'
autocmd! BufEnter *.js   let b:fswitchdst = 'purs'
