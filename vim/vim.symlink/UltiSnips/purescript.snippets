snippet module "Module definition" b
module $1 where

import Prelude

import Data.Maybe (Maybe(..))
import Data.List (List(..), (:))

$2
endsnippet

snippet eff "import Eff" b
import Control.Monad.Eff
endsnippet

snippet maybe "import Maybe" b
import Data.Maybe
endsnippet

snippet list "import List" b
import Data.List
endsnippet

snippet foreign "foreign function definition" b
foreign import $1 :: forall eff. $2
endsnippet

snippet fn "a function definition" b
$1 :: $2
$1 $3 = $4
endsnippet

snippet fneff "a function definition in the Eff monad" b
$1 :: forall eff. $2 Eff ($3 | eff) $4
$1 = $5
endsnippet

snippet forall "Unicode forall"
∀
endsnippet

snippet :: "Unicode ::"
∷
endsnippet

snippet -> "Unicode Left arrow"
→
endsnippet

snippet <- "Unicode Right arrow"
←
endsnippet

snippet => "Unicode Left fat arrow"
⇒
endsnippet

snippet <= "Unicode Right fat arrow"
⇐
endsnippet

snippet (+) "Unicode circled plus"
⊕
endsnippet

snippet (*) "Unicode circled times"
⊗
endsnippet

snippet ~> "Unicode wiggly arrow"
↝
endsnippet

snippet () "Unicode compose"
∘
endsnippet

snippet * "Unicode times"
⋅
endsnippet

snippet ~= "isomorphic"
≅
endsnippet
